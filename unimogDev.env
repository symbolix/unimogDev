#!/bin/bash -f
# ;---------------------------------------------------------------------------------------
# ; {UNIMOG} Integrated Pipeline Tools
# ;
# ; Name    :   unimogDev.env
# ; Version :   0.0.1.[4]
# ; Author  :   Muhittin Bilginer
# ; Created :   03/10/2015
# ; Edited  :   08/10/2014
# ;
# ; Info    :   This file is responsible for propagating the DEV flags across the Unimog 
# ;             environment. It uses another core Unimog tool "unimogDev.py" to gather the
# ;             required information.
# ;
# ; This tool is part of Unimog.
# ;----------------------------------------------------------------------------------------

# Create a debug script signature
currentFileName=$(getFileName $BASH_SOURCE)

# Assign the execution variable
command='unimogDev.py'
arguments='-v=0 list --mode=bash'
# global_site_bin=/tools/SITE/$OSname/scripts/bin
# local_site_bin=$HOME/tools/LOCALSITE/$OSname/scripts/bin

# DEBUG test variables.
global_site_bin=.
local_site_bin=.

# Check for SITE/LOCALSITE priorities
if [[ $UNIMOG_PIPELINE_DEV -eq 0 ]]; then
    # PIPELINE_DEV mode is "OFF", the primary location should be the global site
    primaryCommandString=${global_site_bin}/${command}
    # And the scondary location should be the local site
    secondaryCommandString=${local_site_bin}/${command}
    
else
    # PIPELINE_DEV mode is "ON", the primary location should be the local site
    primaryCommandString=${local_site_bin}/${command}
    # And the scondary location should be the global site
    secondaryCommandString=${global_site_bin}/${command}
fi

# Execute the command
if [ ! -f ${primaryCommandString} ]; then
    if [ ! -f ${secondaryCommandString} ]; then
        echo -e "\n<"$currentFileName"> (ERROR): Core pipeline tool: \"${command}\" is not accessible!\n"
    else
        # Fallback to the secondary command
        ELEMENTS=`${secondaryCommandString} ${arguments}`
    fi
else
# Execute the primary command
ELEMENTS=`${primaryCommandString} ${arguments}`
fi

# Get the data from the python back end
if [ "$?" -ne "0" ]; then
    echo -e "\n<"$currentFileName"> (ERROR) Unable to access critical configuration data!\n"
else
    if [[ -z "$ELEMENTS" ]]; then
        echo -e "\n<"$currentFileName"> (ERROR) Missing critical configuration data!\n"
    else
        echo -e "\n<"$currentFileName"> (INFO) Configuration data accessed successfully."
        echo -e "\n<"$currentFileName"> (DEBUG) Incoming configuration data:"
        echo -e "$ELEMENTS\n"
        # Cycle on the incoming element list and propagate the variables
        for element in $ELEMENTS
        do
            # Run the setup-up cycle
            # Debug lines
            echo -e "\t<"$currentFileName"> (DEBUG) ["$element"]";
    
            # The actual command
            eval "export $element"
        done 
        echo ""
    fi
fi

# vim: nowrap fdm=marker
